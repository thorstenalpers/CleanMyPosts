name: "Deploy Release"

on:
  workflow_dispatch: # manual trigger

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution: "src/CleanMyPosts.sln"
      UI_Project: "src/UI/UI.csproj"
      UnitTest_Project: "src/UnitTests/UnitTests.csproj"
      IntegrationTest_Project: "src/IntegrationTests/IntegrationTests.csproj"
      Installer_Script: "installer/Installer.iss"
      FORCE_COLOR: "true"
      DOTNET_LOGGING__CONSOLE__COLORBEHAVIOR: Enabled

    steps:
    - name: Checkout main
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Install Inno Setup
      run: choco install innosetup --yes

    - name: Restore
      run: dotnet restore "${{ env.Solution }}"

    - name: Build
      run: dotnet build "${{ env.Solution }}" --configuration Release --no-restore

    - name: Run Unit Tests
      run: dotnet test "${{ env.UnitTest_Project }}" --configuration Release --logger "console;verbosity=detailed"

    - name: Run Integration Tests
      run: dotnet test "${{ env.IntegrationTest_Project }}" --configuration Release --logger "console;verbosity=detailed"

    - name: Extract Version
      id: get_version
      shell: pwsh
      run: |
        $content = Get-Content "${{ env.UI_Project }}" -Raw
        if ($content -match '<Version>\s*(.+?)\s*</Version>') {
          $version = $matches[1].Trim()
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
          throw "Version not found in project file"
        }

    - name: Publish x64
      run: |
        dotnet publish "${{ env.UI_Project }}" -c Release -r win-x64 --self-contained true `
          -o artifacts/publish-x64

    - name: Build Installer x64
      run: |
        iscc "/DMyAppVersion=${{ env.VERSION }}" "/DMyAppExePath=..\\artifacts\\publish-x64\\*" "${{ env.Installer_Script }}"

    - name: Copy Installer Exe to Artifacts
      run: |
        mkdir artifacts\installer
        copy installer\Output\CleanMyPosts-Installer-${{ env.VERSION }}-win-x64.exe artifacts\installer\

    - name: Clone update-feed branch to separate folder
      run: |
        git clone --branch update-feed --single-branch https://github.com/${{ github.repository }} update-feed || mkdir update-feed

    - name: Copy update.xml from update-feed or fallback
      shell: pwsh
      run: |
        if (Test-Path "update-feed/update.xml") {
          Copy-Item "update-feed/update.xml" "update.xml"
        } else {
          "No update.xml found in update-feed branch." | Out-File update.xml
        }

    - name: Fetch and override update.xml from update-original.xml
      shell: pwsh
      run: |
        $originalUrl = "https://raw.githubusercontent.com/thorstenalpers/CleanMyPosts/update-feed/update-original.xml"
        Invoke-RestMethod -Uri $originalUrl -OutFile "update.xml"

    - name: Generate update.xml from template
      shell: pwsh
      run: |
        $version = "${{ env.VERSION }}"
        $repo = "${{ github.repository }}"
        $baseUrl = "https://github.com/$repo/releases/download/v$version"
        $installerUrl = "$baseUrl/CleanMyPosts-Installer-$version-win-x64.exe"
        $changelogUrl = "https://github.com/$repo/releases/tag/v$version"

        $template = Get-Content "update.xml" -Raw
        $xmlContent = $template `
          -replace "{{VERSION}}", $version `
          -replace "{{INSTALLER_URL}}", $installerUrl `
          -replace "{{CHANGELOG_URL}}", $changelogUrl

        if (-not (Test-Path "artifacts")) {
          New-Item -ItemType Directory -Path "artifacts" | Out-Null
        }
        $xmlContent | Set-Content -Path "artifacts/update.xml" -Encoding UTF8

    - name: Configure Git Credentials for update-feed push
      run: |
        echo "https://${{ secrets.GH_APIKEY }}@github.com" > $env:USERPROFILE\.git-credentials
        git config --global credential.helper store
        git config --global user.name "github-actions"
        git config --global user.email "actions@github.com"

    - name: Commit and push update.xml to update-feed branch from separate folder
      shell: bash
      run: |
        cd update-feed
        git config user.name "github-actions"
        git config user.email "actions@github.com"

        cp ../artifacts/update.xml update.xml
        git add update.xml

        if git diff --cached --quiet; then
          echo "No changes in update.xml; skipping commit"
        else
          git commit -m "Update appcast for version ${{ env.VERSION }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} update-feed --force
        fi

    - name: Create Git Tag
      run: |
        git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"
        name: "CleanMyPosts ${{ env.VERSION }}"
        body_path: ./release-notes/v${{ env.VERSION }}.md
        files: |
          artifacts/installer/CleanMyPosts-Installer-${{ env.VERSION }}-win-x64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
